package openwt.interview.coding.challenge.persistence.entities;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.List;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.ManyToMany;
import javax.persistence.Table;
import javax.validation.constraints.NotEmpty;
import javax.validation.constraints.Pattern;

import com.fasterxml.jackson.annotation.JsonIgnore;

import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import lombok.Data;


@Entity
@Table(name="skills")
@Data
@ApiModel(description = "Class representing a skill")
public class Skill implements Serializable {

	/**
	 * 
	 */
	private static final long serialVersionUID = 6430665032000330961L;

	@ApiModelProperty(notes = "Identifier of the skill. the id is currently generated by the database"
			, example = "1", position = 0)
	@Id
	@GeneratedValue(strategy=GenerationType.IDENTITY)
	@Column(name="id")
	private Long id;
	
	@ApiModelProperty(notes = "Name of the skill. The name must be a word with size between 5 and 50"
			, example = "Java Programmer", required = true, position = 1)
	@Column(name="name")
	@NotEmpty
	@Pattern(regexp="^([a-zA-Z]\\s*){5,50}$", message="name must be a word with size between 5 and 50")	
	private String name;
	
	@ApiModelProperty(notes = "Level at which the skill is practiced. Level must be a word with size between 3 and 50"
			, example = "Junior", required = true, position = 2)
	@Column(name="level")
	@NotEmpty
	@Pattern(regexp="^([a-zA-Z]){3,50}$", message="level must be a word with size between 3 and 50")	
	private String level;
	
	@ManyToMany(mappedBy="skills")
	@JsonIgnore
	private List<Contact> contacts = new ArrayList<>();
	
	public void addContact(Contact contact) {
		this.contacts.add(contact);
		if (!contact.getSkills().contains(this))
			contact.getSkills().add(this);
	}

	public void removeContact(Contact contact) {
		this.contacts.remove(contact);
		if (contact.getSkills().contains(this))
			contact.getSkills().remove(this);
	}
	
	public void removeAllContacts() {
		contacts.stream()
				.map(Contact::getSkills)
				.filter(skills -> skills.contains(this))
				.forEach(skills -> skills.remove(this));
		contacts.clear();
	}
}
